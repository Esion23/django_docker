name: Build Docker Image and Run Tests

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      repo:
        description: 'owner/repo'
        required: true
      commit:
        description: 'SHA'
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 检出目标仓库的特定提交
      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.commit }}

      # 生成 Dockerfile
      - name: Generate Dockerfile
        run: |
          cat <<EOF > Dockerfile
          # 使用官方的 Python 基础镜像
          FROM python:3.13-slim

          # 设置工作目录
          WORKDIR /app

          # 安装系统依赖
          RUN apt-get update && apt-get install -y curl unzip && rm -rf /var/lib/apt/lists/*

          # 下载并安装项目的依赖
          RUN curl -O https://raw.githubusercontent.com/django/django/main/tests/requirements/py3.txt \
              && pip install --no-cache-dir -r py3.txt

          # 下载项目文件到工作目录
          RUN curl -L https://github.com/django/django/archive/main.zip -o django-main.zip \
              && unzip django-main.zip -d /app \
              && mv /app/django-main/* /app/ \
              && rm -rf django-main django-main.zip

          # 复制测试文件
          COPY tests/admin_docs/test_views.py /app/tests/admin_docs/test_views.py

          # 暴露端口（如有需要）
          EXPOSE 8000

          # 运行指定的测试文件
          CMD ["python", "-Wall", "tests/admin_docs/test_views.py"]
          EOF
      # 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t my-test-image .

      # 运行 Docker 容器，创建虚拟环境，安装依赖并运行测试
      - name: run tests in Docker
        run: |
          docker run -it --name test-container my-test-image 